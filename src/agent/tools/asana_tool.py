import os

import requests
from crewai_tools import tool
from pydantic import BaseModel, Field


class AsanaInput(BaseModel):
    """Input schema for AsanaTool."""
    name: str = Field("", description="Name of the Task")
    notes: str = Field("", description="Notes or Description of the Task")
    due_on: str = Field("", description="Due Date for the task in the format yyyy-mm-dd")





def getIds():
    try:
        result = requests.get(
            os.getenv("ASANA_BASE_URL") + os.getenv("ASANA_USERS_ENDPOINT"),
            headers={
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': 'Bearer {}'.format(os.getenv("ASANA_PAT_TOKEN"))
            }
        )

        data = result.json()

        workspaceId = data["data"]["workspaces"][0]["gid"]
        assigneeId = data["data"]["gid"]

        return workspaceId, assigneeId
    except Exception as e:
        print(f"An error occurred while getting the IDs: {e}")


@tool("Asana Operations Tool")
def AsanaTool(payload: AsanaInput) -> str:
    """
    This tool creates tasks in Asana. It is a wrapper around the Asana API.
    The payload class has the following keys: name, notes, due_on
    Ex: AsanaTool(name="Task Name", notes="Task Description", due_on="2025-11-22")
    :param payload:
    :return: string
    """

    print("Payload generated by Asana Agent:", payload)
    print(payload.name, payload.notes, payload.due_on)

    workspaceId, assigneeId = getIds()
    print("Workspace ID:", workspaceId, "Assignee ID:", assigneeId)
    try:
        data = {
            "data": {
                "name": payload.name,
                "notes": payload.notes,
                "due_on": "2025-11-22",
                "projects": [
                    "1208732085536307"
                ],
                "workspace": workspaceId,
                "assignee": assigneeId
            }
        }

        print("Data:", data)

        result = requests.post(
            os.getenv("ASANA_BASE_URL") + os.getenv("ASANA_TASKS_ENDPOINT"),
            headers={
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': 'Bearer {}'.format(os.getenv("ASANA_PAT_TOKEN"))
            },
            json=data
        )

        return result.json()
    except Exception as e:
        print(f"An error occurred while creating the task: {e}")
