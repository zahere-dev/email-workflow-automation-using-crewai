import sqlite3
from crewai_tools import tool
from pydantic import BaseModel, Field


class DBOpsInput(BaseModel):
    sender_name: str = Field(description="Name of the sender")
    contact_details: str = Field(description="Contact details of the sender")
    email_content: str = Field(description="Content of the email")
    category: str = Field(description="Category of the email")
    asana_task_title: str = Field(description="Title of the Asana Task Created")
    asana_task_link: str = Field(description="Link of the Asana Task Created")


@tool("DB Operations Tool")
def db_ops_tool(payload: dict) -> str:
    """This tool inserts data into a SQLite database.
     The payload pydantic class has the following keys: sender_name, contact_details, email_content, category, asana_task_title, asana_task_link
     Example: {sender_name="John", contact_details="john@email.com", email_content="Hello!", category="email",
      asana_task_title="Task Title", asana_task_link="https://app.asana.com/0/0/1234567890"}
     :param payload: DBOpsInput
    :return: string
     """

    print("Payload generated by DB Ops Agent:", payload)
    try:
        # Connect to the database
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()

        # Create the table if it doesn't exist
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS email_task_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sender_name TEXT,
                contact_details TEXT,
                email_content TEXT,
                category TEXT,
                asana_task_title TEXT,
                asana_task_link TEXT
            )
        ''')

        # Insert the data
        cursor.execute('''
            INSERT INTO email_task_log (sender_name, contact_details, email_content, category,
             asana_task_title, asana_task_link)
            VALUES (?, ?, ?, ?, ?,?)
        ''', (
            payload.get("sender_name"),
            payload.get("contact_details"),
            payload.get("email_content"),
            payload.get("category"),
            payload.get("asana_task_title"),
            payload.get("asana_task_link")
        ))

        # Commit the changes and close the connection
        conn.commit()

        cursor.execute('SELECT * FROM email_task_log')
        records = cursor.fetchall()
        print("Records:", records)

        conn.close()
        return "Data inserted successfully!"
    except Exception as e:
        print(f"An error occurred while inserting data: {e}")
        return f"An error occurred while inserting data. Error: {e}"


def read_all_records():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM email_task_log')
    records = cursor.fetchall()

    conn.close()

    return records
